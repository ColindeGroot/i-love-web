[
    {
        "date": "03-02-2025",
        "title": "Introductie nodejs",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een introductie gekeregen met nodejs en liquid. Met liquid kan je heel makkelijk json ophalen en weergeven in html"
            },
            {
                "content": "Tijdens de expo zijn twee personen van mijn opdrachtgever nog langs gekomen om nog een keer mijn project en dat van andere studenten te bekijken. Hier heb ik ze doorlopen door mijn website en wat verteld over het werk van andere studenten."
            }
        ]
    },
    {
        "date": "05-02-2025",
        "title": "Visite kaartje met node en liquid",
        "contentBlocks": [
            {
                "content": "Vandaag zijn we begonnen met het bouwen van ons visitekaartje met nodejs. Hier hebben we gebruik gemaakt van de restAPI en hebben we JSON gepasrt: <code> const personResponseJSON = await personResponse.json() <br/> const customProp = JSON.parse(personResponseJSON.data.custom) </code>",
                "listTitle": "Mijn planning voor de rest van de week",
                "listItems": [
                    "Mijn animatie met offset path afmaken",
                    "Meer custom data toevoegen zodat mijn kaartje zo dynamisch mogelijk is",
                    "Nieuwe routes aanmaken om custom data mee te geven"
                ]
            }
        ]
    },
    {
        "date": "07-02-2025",
        "title": "Code/Design review kaartje",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een ocde en design review gehad op ons kaartje."
            },
            {
                "content": "We hebben elkaar door middel van issues op onze <a href='https://github.com/ColindeGroot/connect-your-tribe-profile-card/issues/1'>Github repo</a>. Zo heb ik feedback gekregen op mijn kleurgebruik van mijn kaartje en heb ik geleerd dat ik mijn render server eerder moet opstarten zodat ik sneller een review kan krijgen"
            }
        ]
    },
    {
        "date": "28-2-2025",
        "title": "Vragenlijst",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een reflectie over afeglopen sprint en beschrijven we met illustatraties hoe wij de samenwerking hebben ervaren.",
                "listTitle": "Vragen voor mezelf",
                "listItems": [
                    "Ik kan uitleggen wat NodeJS is en waarvoor het gebruikt wordt: 2-",
                    "Ik weet wat het doel van package.json is en heb hier aanpassingen ingemaakt: 2- versie beheer van o.a. dependencies",
                    "Ik heb met npm packages geïnstalleerd en gebruikt in het bestand server.js: 3- Gebruik van express en routes",
                    "Ik kan met commando’s in de terminal een NodeJSproject stoppen en starten: 3- control+C (^c) en npm start etc.",
                    "Ik weet waarom ik mijn NodeJS project regelmatig moet herstarten en kan dit uitleggen: 3- Bij aanpassingen in de server moet je herstarten omdat de aanpassingen niet lokaal zijn moet je de server herstarten",
                    "Ik heb een strategie voor debuggen inNodeJS: 2- console.log voor bekijken van data en eventuele errors als iets niet opgehaald word",
                    "Ik kan uitleggen wat Express.js doet en waarom het nodig is om met NodeJS een website te bouwen: 2- aanmaken van routes om pagina's weer te geven (server side rendering)",
                    "Ik weet wat routes zijn en kan zelf een nieuwe route aanmaken: 2- met een get haal je route op ( .get(route) ) en met post kan je op de route data versturen",
                    "Ik weet wat request en response argumenten zijn in een functie voor het laden van data: 1- request wanneer je iets wilt ophalen en response voor bijv het renderen van de pagina nadat je data van de request binnen is ",
                    "Ik heb gebruik gemaakt van een request parameter om specifieke data te laden: 2- voor de message functie heb ik een request in de http gebruikt om de berichten van de juiste persoon op te halen",
                    "Ik kan uitleggen wat Liquid doet en waarom het nodig is om met Express.js een website te maken:2- liquid is dynamisch en heeft express nodig om de data op te kunnen halen van de server",
                    "Ik weet hoe ik data naar Liquid verstuur om dit te gebruiken bij het renderen van een pagina: 2- met for loops en if statement heb ik data opgehaald uit objecten",
                    "Ik weet hoe ik Liquid filters toe kan passen en waar ik kan vinden hoe die werken: 2- liquid heeft een docs met filters. Ik heb zelf enkel een default filter gebruikt",
                    "Ik heb een nieuwe route gemaakt en nieuwe data meegegeven aan een Liquid view: 3- Ik heb meerde nieuwe pagina's gemaakt en daar data aan meegegeven zoals de student page met messages",
                    "Ik weet waar een foreach loop voor gebruikt wordt en pas het toe in een Liquid view om HTML te renderen:2- ik heb een for loop gebruik voor de kaartjes. Voor elk student in de lijst word een kaartje gemaakt ",
                    "Ik kan in Liquid een controle maken waarmee de avatar niet getoond wordt als deze niet in whois.fdnd.nl is ingevuld:3- Dit heb ik gedaan op mijn eigen squadpage: <code>{% if person.avatar != blank %}</code>",
                    "Ik heb een strategie voor debuggen in Liquid: 1- je kan normale script gebruiken met een log maar liquid bied ook een comments functie aan (niet gebruikt)",
                    "Ik kan data fetchen uit een REST API: 2- Ik heb alleen nog wel moeite met de juiste filters gebruiken in de url",
                    "Ik snap het verschil tussen HTTP requests van de methodes GET en POST: 3- GET om op te halen POST om te versturen",
                    "Ik kan data uit een REST API filteren of sorteren: 2- Ik weet welke filters ik kan gebruiken maar vind het soms nog lastig om deze te verwerken in de URL ",
                    "Ik snap wat het async keyword doet in JavaScript code: 2- met async wat je met uitvoeren van de functie totdat alle data is",
                    "Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON: 0-",
                    "Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten: 2- Bij client side worden er dingen opgeslagen bij de client en niet de server als de client is client-side post is het niet voor andere te zien",
                    "Ik kan formulierdata die is ge-POST opslaan in een variabele op de server en gebruiken bij het renderen van een pagina: 1- ",
                    "Ik kan formulierdata die is ge-POST door middel van een POST of PATCH HTTP request opslaan in de REST API 0-",
                    "Totaal punten: 49"
                ]
            }
        ]
    },
    {
        "date": "03-03-2025",
        "title": "Mediahuis/wearetriple",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een nieuwe opdrachtgever gekozen. Ik ben hierbij ingepland met Dylan en Clarice"
            },
            {
                "content": "Wij hebben als Opdrachtgever Mediahuis/ triple waar wij een EPG voor gaan maken van de radiostations die beheert worden door mediahuis."
            }
        ]
    },
    {
        "date": "04-03-2025",
        "title": "Opzet mediahuis project",
        "contentBlocks": [
            {
                "content": "Ik heb vandaag de data van de API's gefetched en opgeslagen. Verder heb ik op de homepagina de radiostations weergegeven met liquid en heb ik mijn breakdown schets afgemaakt (moet nog worden toegevoegd)"
            },
            {
                "content": "Ik wil morgen verder met de routes en de opbouw van de homepagina afmaken en issues aanmaken voor een goede planning en duidelijke bewijslast"
            }
        ]
    },
    {
        "date": "06-03-2025",
        "title": "Workshop Templating met JSON data",
        "contentBlocks": [
            {
                "content": "Tijdens de workshop heb ik de routes klaargezet en data uit Directus in variabelen gezet. <code>app.get('/radio/:name', async function (request, response) { const showsPerDayResponse = await fetch('https://fdnd-agency.directus.app/items/mh_day?fields=date,shows.mh_shows_id.from,shows.mh_shows_id.until,shows.mh_shows_id.show.body,shows.mh_shows_id.show.name,shows.mh_shows_id.show.radiostation.*,shows.mh_shows_id.show.users.mh_users_id.*,shows.mh_shows_id.show.users.*.*'); const showsPerDayResponseJSON = await showsPerDayResponse.json(); response.json(showsPerDayResponseJSON); });</code>"
            }
        ]
    },
    {
        "date": "12-03-2025",
        "title": "Filter notaties in directus",
        "contentBlocks": [
            {
                "listTitle": "expirmenten in directus met filter en sort:",
                "listItems": [
                    "Sorteer op naam: https://fdnd.directus.app/items/person?sort=name met sort sorteer je op naam",
                    "Haal alle mensen op met een D in hun naam: https://fdnd.directus.app/items/person/?fields=name&sort=name&filter={%22name%22:{%22_starts_with%22:%22D%22}} starts_with om naam op te halen die begint met D",
                    "Mensen met een D of een K: https://fdnd.directus.app/items/person/?fields=name&sort=name&filter={%22_or%22:[{%22name%22:{%22_starts_with%22:%22D%22}},{%22name%22:{%22_starts_with%22:%22K%22}}]} met de or logical operator"
                ],
                "content": "Om meer te leren kan ik gebruik maken van <a href='https://directus.io/docs/guides/connect/filter-rules'>Directus filter rules</a>"
            }
        ]
    },
    {
        "date": "14-3-2025",
        "title": "Redesign studio, en retrospect",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een retrospect en worden we gevraagd hoe wij het lokaal kunnen redesignen zodat leerlingen langer willen blijven",
                "listTitle": "Dit gaat goed:",
                "listItems": [
                    "Docenten en andere leerlingen zijn bijna altijd beschikbaar voor vragen",
                    "Door de groepjes is de sfeer erg gezellig"
                ]
            },
            {
                "content": "Vandaag hebben we een retrospect en worden we gevraagd hoe wij het lokaal kunnen redesignen zodat leerlingen langer willen blijven",
                "listTitle": "Dit gaat minder goed:",
                "listItems": [
                    "Omdat het zo vol/krap is kan het lastig zijn om te concentreren",
                    "Het aquarium is vaak koud en is erg leeg/ sfeerloos waardoor het niet fijn werkt"
                ]
            }
        ]
    },
    {
        "date": "17-3-2025",
        "contentBlocks": [
            {
                "content": "Vandaag een workshop over Progresive enhanchments",
                "listTitle": "Progressive enhanchment bestaat uit 3 stappen:",
                "listItems": [
                    "Bepaal de core functionaliteit",
                    "Bouw op de simpelste techniek mogelijk",
                    "Voeg enhanchments toe"
                ]
            },
            {
                "content": "Ik ben tegen een knelpunt aangekomen met de database. Ik wil namelijk een likefunctie maken maar deze likes moeten opgeslagen worden in de database.Omdat er nog geen data aanwezig is voor de likes moet deze toegevoegd worden in de database"
            }
        ]
    },
    {
        "date": "4-4-2025",
        "title": "Vragenlijst",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een reflectie over afeglopen sprint en beschrijven we met illustatraties hoe wij de samenwerking hebben ervaren.",
                "listTitle": "Vragen voor mezelf",
                "listItems": [
                    "1 Ik kan uitleggen wat NodeJS is en waarvoor het gebruikt wordt: 3-  je gebruikt node voor het instaleren van o.a. packages hiermij krijg je toegang tot ",
                    "2 Ik weet wat het doel van package.json is en heb hier aanpassingen ingemaakt: 3- ik snap hoe ik packages kan toevoegen en beheren met de package.json <code>'dependencies': {'express': '^5.0.1','liquidjs': '^10.21.0'}</code>",
                    "3 Ik heb met npm packages geïnstalleerd en gebruikt in het bestand server.js: 3- Gebruik van express en routes (npm install)",
                    "4 Ik kan met commando’s in de terminal een NodeJS project stoppen en starten: 3- control+C (^c) en npm start etc.",
                    "5 Ik weet waarom ik mijn NodeJS project regelmatig moet herstarten en kan dit uitleggen: 3- Bij aanpassingen in de server moet je herstarten omdat de aanpassingen niet lokaal zijn",
                    "6 Ik heb een strategie voor debuggen in NodeJS: 2- console.log om te kijken of data binnenkomt en try catch voor simpelle error handling <code>catch (error){console.log(error)}</code>",
                    "7 Ik kan uitleggen wat Express.js doet en waarom het nodig is om met NodeJS een website te bouwen: 2- Express word gebruikt voor server side code en kan met routes goed gebruikt worden voor templating. Nodejs is hiervoor nodig omdat het een node package is",
                    "8 Ik weet wat routes zijn en kan zelf een nieuwe route aanmaken: 3- met een get haal je route op en met post verstuur je data (post heeft ook andere methods die je kan gebruiken zoals DELETE) <code>app.post('/radio/:stationName/show/:id/like', async (req, res) => {</code>",
                    "9 Ik weet wat request en response argumenten zijn in een functie voor het laden van data: 2- request kan je gebruiken als je iets in de route wil doorgeven zoals een id van een opgehaalde item uit de database en deze mee wilt geven en met reponse kan je een reactie terug krijgen zoals een render functie ",
                    "10 Ik heb gebruik gemaakt van een request parameter om specifieke data te laden: 2- voor de message functie heb ik een request in de http gebruikt om de berichten van de juiste persoon op te halen <code>req.params.data</code>",
                    "11 Ik kan uitleggen wat Liquid doet en waarom het nodig is om met Express.js een website te maken:2- liquid is dynamisch en heeft express nodig om de data op te kunnen halen van de server",
                    "12 Ik weet hoe ik data naar Liquid verstuur om dit te gebruiken bij het renderen van een pagina: 3- met een render geef ik properties door die ik wil inladen met liquid",
                    "13 Ik weet hoe ik Liquid filters toe kan passen en waar ik kan vinden hoe die werken: 2- liquid heeft een docs met filters. Ik heb filters zoals truncate en strip gebruikt",
                    "14 Ik heb een nieuwe route gemaakt en nieuwe data meegegeven aan een Liquid view: 3- Ik heb meerde nieuwe pagina's gemaakt en daar data aan meegeven viqa de render functie <code>app.get('/journal/:slug', async function (req, res) {console.log(req.params.slug) const fileContents = await readFile('content/' + req.params.slug, { encoding: 'utf8' }) res.render('semester.liquid', {fileContents})  }) </code>",
                    "15 Ik weet waar een foreach loop voor gebruikt wordt en pas het toe in een Liquid view om HTML te renderen:3- ik heb een for loop gebruikt om voor elk radio station een daar een item voor aan te maken ",
                    "16 Ik kan in Liquid een controle maken waarmee de avatar niet getoond wordt als deze niet in whois.fdnd.nl is ingevuld:3- Dit heb ik gedaan op mijn eigen squadpage: <code>{% if person.avatar != blank %}</code>",
                    "17 Ik heb een strategie voor debuggen in Liquid: 1- Ik heb al mijn debugging gedaan in de server. Het enige wat verkeerd ging in liquid heb ik gencotrolleerd in de browser devtools met de netwerk tab om te kijken waar de url heen ging van mijn post action.",
                    "18 Ik kan data fetchen uit een REST API: 3- Ik weet hoe ik met een fetch in een get route data kan ophalen en meegeven aan pagina's",
                    "19 Ik snap het verschil tussen HTTP requests van de methodes GET en POST: 3- GET om op te halen POST om te versturen met post kan je verschillende methods meegeven zoals patch en delete",
                    "20 Ik kan data uit een REST API filteren of sorteren: 2- Ik weet hoe ik met de url van directus data kan filkteren en sorteren maar de syntax blijft toch wel lastig ",
                    "21 Ik snap wat het async keyword doet in JavaScript code: 2- met async voor je ascynchroom een functie uit dit houd in dat de functie onafhankelijk van de rest van de pagina word ingeladen",
                    "22 Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON: 0-",
                    "23 Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten: 3- Ik weet dat client side code het beste te gebruiken is voor enkel enhachments van functies en serverside beter is voor gebruikers voor het dynamisch inladen van content. Met serverside code kunne gebruikers van oudere devices en browsers alsnog gebruik maken van je website",
                    "24 Ik kan formulierdata die is ge-POST opslaan in een variabele op de server en gebruiken bij het renderen van een pagina: 3- met een like functie sla ik met een require functie (params) een showid op in een variable en geef ik deze terug in mijn liquid template.",
                    "25 Ik kan formulierdata die is ge-POST door middel van een POST of PATCH HTTP request opslaan in de REST API 1-",
                    "Totaal punten: 61"
                ]
            }
        ]
    },
    {
        "date": "9-5-2025",
        "title": "vragenlijst sprint 10",
        "contentBlocks": [
            {
                "content": "Vandaag weer een vragenlijst :/",
                "listTitle": "Vragen",
                "listItems": [
                    "Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten: 3",
                    "Ik heb een strategie voor server-side JavaScript debuggen, voor client-side JavaScript debuggen, en voor Liquid code debuggen 2- met console.logs en errors catchen kan ik zien of data binnenkomt en deze goed word omgezet. liquid debuggen is bijna niet nodig geweest dus hier heb ik geen gebruik van gemaakt",
                    "Ik kan GET en POST routes aanmaken en request parameters gebruiken: 3 met gebruik van <code>app.post('/', async (req, res)</code> met de res en req laad in de pagina in met een render",
                    "Ik kan server-side JSON data fetchen uit een REST API: 3- met een fetch funtie weet ik hoe ik data moet ophalen. ik heb zelfs met params request gewerkt als filter in mijn url: <code>const likesForShows = await fetch(`https://fdnd-agency.directus.app/items/mh_messages?filter=${filter}`);</code>",
                    "Ik kan data uit een REST API filteren of sorteren: 2- zoals aangetoont heb ik gebruik gemaakt van filters in mijn url (?filter=)",
                    "Ik snap wat het async keyword doet in JavaScript code: 2- async zorgt ervoor dat de functie pas word uitgevoerd wanneer de data binnen is",
                    "Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON: 2- met een try catch vraag je de server om iets proberen te fetchen met de catch kan je bijvoorbeeld een error handling aan toeveogen voor als het catchen niet werkt",
                    "Ik kan met een client-side fetch een werkend formulier verrijken: 1- met de prevent default heb ik ervoor gezorgd dat de state van het formulier automatisch update maar ik heb me hier niet verder in kunnen verdiepen",
                    "Ik kan multi-page en single-page view transitions inzetten en aanpassen: 1- alleen nog toegekomen aan multipage transistion waarin ik gebruik maak van view-transisition groups <code> @view-transition {navigation: auto;} ::view-transition-group(.title) {animation-duration: 0.2s;} }</code>",
                    "Ik kan verschillende manieren van responsive images uitleggen en toepassen: 2- door de foto's een standaard grootte te geven heb je geen last van cls",
                    "Ik weet hoe ik de resultaten van een performance audit moet interpreteren en hoe ik performance problemen kan oplossen: 2- bij onderdelenbnen zoals cls kan je duidelijk zien waar zich een shift plaatst vind door vaste waardes mee te geven aan content dat nog moet inladen voorkom je dat ze een layout shift veroorzaken",
                    "Ik weet hoe ik met client-side JS de UX kan verbeteren, rekening houdend met progressive enhancement",
                    "Ik weet hoe ik binnen HTML, CSS en client-side JS nieuwe technieken toe kan passen, rekening houdend met oudere browsers: 2- met feauture detection contoleer je of browsers bepaalde functies ondersteunen. Zo niet dan maak je een fallback. Voorbeeld in css: <code>@supports selector(:target) {}</code>",
                    "Ik weet wat objecten, arrays, strings, loops, variabelen, functies en parameters zijn, en kan die in JavaScript inzetten: ik weet de verschillen en hoe deze kan toepassen en omzetten. Zo parse ik strings naar json, zet je objecten om met stringify en gebruik ik loops in mijn liquid voor het inladen van mijn shows. <code>body: JSON.stringify({}), {% for item in weekDays %}</code>",
                    "Ik weet wat geavanceerdere concepten in JavaScript zijn, zoals closures, promises, callbacks, scope en de event loop: 1- ik weet wat de eventloop en promisses doen maar heb ze nog niet vaak toegepast buiten de server om",
                    "Ik kan via GitHub met feature branches werken, pull requests aanmaken, reviewen en mergen: 2- ik heb eerder gewerkt met branches en pull request voor gezamelijke projecten",
                    "Ik weet hoe ik formulieren pro-actief kan valideren met client-side code: 0-",
                    "Ik weet de eerste regel van ARIA, en wat dat betekent voor hoe ik HTML schrijf: 3- niet gebruiken als het met HTML kan. Vaak bied HTML al oplossingen die je anders met ARIA doet",
                    "Ik weet wat layout shifts zijn, door wat ze veroorzaakt worden, hoe ik ze kan meten en hoe ik ze kan oplossen: 2- doordat content geen vaste plek heeft voordat het word ingeladen kan content verschuiven wanneer het verschijnt. Met devtools kan je dit meten en vaak ook zien waar het plaats vind",
                    "Ik weet wat de Core Web Vitals zijn, hoe ik die kan meten, en hoe ik de cijfers moet interpreteren: 3- Vitals worden ingedeeld onder groepen waarmee de gebruikerservaring op websites gemeten wordt. Deze statistieken zijn: Largest Contentful Paint Interaction to Next Paint Cumulative Layout Shift.",
                    "Ik weet hoe perceived performance invloed heeft op de beleving van een gebruiker, en ik heb de ontwerp- en code vaardigheden om die toe te passen",
                    "Ik kan UI states in meerdere lagen van progressive enhancement inzetten om de UX te verbeteren. Met een succes en erorr state geef ik gebruikers feedback van de status. Dit doe ik door een ander formulier te tonen als er geliked is<code>{% if likes contains showId %} <andereform></code>",
                    "Ik kan een UI leuker en prettiger maken, zonder de core functionaliteit uit het oog te verliezen 1- moet nog animaties toevoegen",
                    "Ik weet hoe ik verschillende vormen van feature detection in kan zetten in HTML, in CSS en in client-side JS 2-"
                ]
            }
        ]
    },
    {
        "date": "23-5-2025",
        "title": "We love web kalok yeung",
        "contentBlocks": [
            {
                "content": "Vandaag hebben we een lezing gekregen van Kelok yeung over emotinal interface. Hier legt hij uit hoe je emoties stimuleert bij gebruikers van je website.",
                "listTitle": "Besproken onderdelen:",
                "listItems": [
                    "Soft UI: Afgeronde hoeken, witruimtes en een rustige layout geeft de gebruiker rust.",
                    "Motion: Moet iets bijdragen en niet als decoratie. Onnodige motion is storend voor de gebruiker",
                    "Geluid: Word vaak gezien als hindernis maar kan bij juist gebruik branding toevoegen.",
                    "Content: Verscxhillende manieren van content overbrengen via bijvoorbeeld een conversational interface (leuk om naar te kijken)"
                ]
            },
            {
                "content": "Verder de tip gekregen om niet alles te prototypen in figma en om te kijken hoe je componenten kan hergebruiken op een creatieve manier."
            }
        ]
    },
    {
        "date": "02-06-2025",
        "title": "Proof of concept - INFO",
        "contentBlocks": [
            {
                "content": "Vandaag briefing gehad met nieuwe opdrachtgever: INFO. Ik heb van info de opdracht gekregen om komende 3 weken te werken aan een dashbard van Jan Ingenhousz Institution (JII). Op dit dashbaord komen resulateten van experimenten te staan van photosynteshe voor betere groei van planten. In deze 3 weken bouw ik een dashbaord met een post en delete mogelijk en de optie om experimenten te kunnen viewen en de data van de IoT devices in te laden bij het project. "
            }
        ]
    } ,
    {
        "date": "05-06-2025",
        "title": "JII - reliable laag",
        "contentBlocks": [
            {
                "content": "Vandaag begonnen met de one-column layout en alle data ingeladen van de endpoints.. Met routes alvast doorgelinkt naar projecten. Ik ga morgen een post functie maken om te testen of ik experimenten kan toevoegen"
            }
        ]
    },
    {
        "date": "06-06-2025",
        "title": "JII - reliable laag",
        "contentBlocks": [
            {
                "content": "Post functie gemaakt maar er ontbreken dingen die niet in de docuementatie staat. Om een uniek id mee te geven maak ik gebruik van een UUID zodat post niet hetzelfde id kunnen hebben. Dit heb ik als package toegevoegd samen met de huidige datum:<code> 'id:' uuidv4(),</code> zie meer op de <a href=https://www.npmjs.com/package/uuid>docs van npm</a>"
            }
        ]
    },
    {
        "date": "10-06-2025",
        "title": "JII - micro interacties ",
        "contentBlocks": [
            {
                "content": "Begonnen met mijn eerste micro interactie waarbij de delete knop van animatie veranderd als je eroverheen hovert. Andere buttons ook van animatie voorzien en op de detailpagina alle projecten doorgelinked. Eerste versie online gezet op render"
            }
        ]
    }  

]